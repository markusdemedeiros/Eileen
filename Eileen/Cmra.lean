/-
Authors: Markus de Medeiros

Based on https://gitlab.mpi-sws.org/adamAndMath/iris/tree/fossacs-2025?ref_type=tags
-/

import Eileen.Ofe
import Mathlib.Algebra.Group.Defs
import Mathlib.Data.Nat.Defs

abbrev Pred (T : Sort*) :=
  T -> Prop

abbrev IPred (T : Sort*) :=
  ‚Ñï -> T -> Prop

-- This is different to the Op class from
abbrev Op (Œ± : Type*) := Mul Œ±

abbrev op [Op Œ±] : Œ± -> Œ± -> Œ± := Mul.mul

-- \cdot
-- Alternate notation
notation:60 l:50 " ‚¨ù " r:50 => l * r

@[simp]
def included [Op Œ±] [Rel Œ±] : Relation Œ± :=
  fun x y => ‚àÉ z, y ‚âà x ‚¨ù z

-- \lessapprox
notation:50 l:50 " ‚â≤ " r:50 => included l r

@[simp]
def iincluded [Op Œ±] [IRel Œ±] : IRelation Œ± :=
  fun n x y => ‚àÉ z, y ‚âà[ n ] x ‚¨ù z

notation:50 l:50 " ‚â≤[ " n:50 " ] " r:50 => iincluded n l r


@[simp]
def opM [Op Œ±] (x : Œ±) : Option Œ± -> Œ±
| some y => x ‚¨ù y
| none => x

-- TODO opM notation


class Valid (Œ± : Sort*) where
  valid : Pred Œ±

export Valid (valid)

-- \checkmark
notation:50 "‚úì " r:50 => valid r

class IValid (Œ± : Sort*) where
  ivalid : IPred Œ±

export IValid (ivalid)

notation:50 "‚úì[ " n:50 " ] " r:50 => ivalid n r

@[simp]
def iidempotent [Op Œ±] [IRel Œ±] : IPred Œ± :=
  fun n x => (x ‚¨ù x) ‚âà[n] x

-- Porting: AKA CoreID
@[simp]
def idempotent [Op Œ±] [Rel Œ±] : Pred Œ± :=
  fun x => (x ‚¨ù x) ‚âà x

@[simp]
def exclusive [Op Œ±] [IValid Œ±] : Pred Œ± :=
  fun x => ‚àÄ y, ¬¨ ‚úì[0] (x ‚¨ù y)

@[simp]
def icancelable [Op Œ±] [IRel Œ±] [IValid Œ±] (n : ‚Ñï) (y z : Œ±) : Pred Œ± :=
  fun x => ‚úì[n] (x ‚¨ù y) -> (x ‚¨ù y) ‚âà[n] (x ‚¨ù z) -> y ‚âà[n] z

@[simp]
def cancelable [Op Œ±] [IRel Œ±] [IValid Œ±] : Pred Œ± :=
  fun x => ‚àÄ n y z, icancelable n y z x

@[simp]
def id_free [Op Œ±] [IRel Œ±] [IValid Œ±] : Pred Œ± :=
  fun x => ‚àÄ y, ¬¨ (‚úì[0] x ‚àß (x ‚¨ù y) ‚âà[0] x)

abbrev is_iidempotent_lb [Op Œ±] [IRel Œ±] (x : Œ±) : IPred Œ± :=
  fun n y => y ‚â≤[n] x ‚àß iidempotent n y

abbrev is_maximal_iidempotent_lb [IRel Œ±] [CommSemigroup Œ±] (x : Œ±) (n : ‚Ñï) (cx : Œ±)  : Prop :=
  is_iidempotent_lb x n cx ‚àß ‚àÄ m y, m ‚â§ n -> is_iidempotent_lb x m y -> y ‚â≤[m] cx

abbrev no_maximal_iidempotent [IRel Œ±] [CommSemigroup Œ±] (x : Œ±) : Prop :=
  ‚àÄ y, ¬¨ is_iidempotent_lb y 0 x

-- Note: Defined as a Type so that the choice of cx is relevant
inductive MI.{u} {Œ± : Type u} [OFE Œ±] [IValid Œ±] [CommSemigroup Œ±] : Œ± -> ‚Ñï -> Type (u + 1)
| HasMI (x : Œ±) (n : ‚Ñï) (cx : Œ±) (_ : is_maximal_iidempotent_lb x n cx) : MI x n
| NoMI (x : Œ±) (_ : no_maximal_iidempotent x) : MI x n

class CMRA (Œ± : Type*) extends OFE Œ±, CommSemigroup Œ±, Valid Œ±, IValid Œ± where
  op_nonexpansive (x : Œ±) : nonexpansive (op x) -- Q: Interesting that its not nonexpansive2, why?
  valid_irel_imp_proper n : is_proper1 (irel n) (fun x y => x -> y) (ivalid n)
  valid_iff_forall_ivalid (x : Œ±) : ‚úì x <-> ‚àÄ n, ‚úì[n] x
  valid_of_validS (x : Œ±) (n : ‚Ñï) : ‚úì[n + 1] x -> ‚úì[n] x
  ivalid_op_left (x y : Œ±) (n : ‚Ñï) : ‚úì[n] (x ‚¨ù y) -> ‚úì[n] x
  ivalid_irel_prod (x y1 y2 : Œ±) n :
    ‚úì[n] x -> (x ‚âà[n] y1 ‚¨ù y2) -> ‚àÉ (x1 x2 : Œ±), x ‚âà x1 ‚¨ù x2 ‚àß x1 ‚âà[n] y1 ‚àß x2 ‚âà[n] y2
  maximal_idempotent_axiom (x : Œ±) (n : ‚Ñï) (_ : ‚úì[n] x) : MI x n

export CMRA (op_nonexpansive valid_irel_imp_proper valid_iff_forall_ivalid
             ivalid_op_left valid_of_validS ivalid_irel_prod maximal_idempotent_axiom)

class TotalCMRA (Œ± : Type*) extends CMRA Œ± where
  cmra_total (x : Œ±) : ‚àÉ cx, ‚àÄ n, is_iidempotent_lb x n cx

export TotalCMRA (cmra_total)

class UCMRA (Œ± : Type*) extends CMRA Œ±, MulOneClass Œ± where
  valid_one: ‚úì one

abbrev Œµ {Œ± : Type*} [UCMRA Œ±] := (One.one : Œ±)

export UCMRA (valid_one)


section CMRAUnbundled

namespace CMRA

variable (Œ± Œ≤ Œ≥ : Type*) [CMRA Œ±] [CMRA Œ≤] [CMRA Œ≥]

-- TODO Setoid lemmas

lemma valid_of_forall_ivalid (x : Œ±) : (‚àÄ n, ‚úì[n] x) -> ‚úì x := by
  apply (valid_iff_forall_ivalid _).mpr

lemma ivalid_of_forall_valid (x : Œ±) : ‚úì x -> (‚àÄ n, ‚úì[n] x) := by
  apply (valid_iff_forall_ivalid _).mp

lemma op_opM_assoc (x y : Œ±) (z : Option Œ±) : opM (x ‚¨ù y) z = x ‚¨ù (opM y z) := by
  cases z <;> simp [opM, mul_assoc]

lemma ivalid_le (x : Œ±) (m n : ‚Ñï) : ‚úì[n] x -> m ‚â§ n -> ‚úì[m] x := by
  intros _ Hle
  induction Hle using Nat.decreasingInduction
  ¬∑ apply valid_of_validS; trivial
  ¬∑ trivial

lemma ivalid_op_right (x y : Œ±) (n : ‚Ñï) : ‚úì[n] (x ‚¨ù y) -> ‚úì[n] y := by
  rw [mul_comm]
  apply ivalid_op_left

lemma valid_op_left (x y : Œ±) : ‚úì(x ‚¨ù y) -> ‚úìx := by
  intro
  apply valid_of_forall_ivalid
  intro
  apply ivalid_op_left
  apply ivalid_of_forall_valid
  trivial

lemma valid_op_right (x y : Œ±) : ‚úì(x ‚¨ù y) -> ‚úìy := by
  rw [mul_comm]
  apply valid_op_left


-- def exclusive [Op Œ±] [IValid Œ±] : Pred Œ± :=
--   fun x => ‚àÄ y, ¬¨ ‚úì[0] (x ‚¨ù y)

lemma exclusive_0_left (x y : Œ±) (H : exclusive x) : ¬¨ ‚úì[0] (x ‚¨ù y) := by
  apply H

lemma exclusive_0_right (x y : Œ±) (H : exclusive y) : ¬¨ ‚úì[0] (x ‚¨ù y) := by
  rw [mul_comm]
  apply H

lemma exclusive_left (x y : Œ±) (H : exclusive x) : ¬¨ ‚úì(x ‚¨ù y) := by
  intro H'
  apply H
  apply ivalid_of_forall_valid
  apply H'

lemma exclusive_right (x y : Œ±) (H : exclusive y) : ¬¨ ‚úì(x ‚¨ù y) := by
  rw [mul_comm]
  apply exclusive_left
  apply H

lemma exclusive_opM n (x : Œ±) (H : exclusive x) my (H' : ‚úì[n] (opM x my)) : my = none := by
  cases my
  ¬∑ rfl
  simp_all
  apply H
  apply ivalid_le
  ¬∑ apply H'
  ¬∑ apply Nat.zero_le

lemma exclusive_includedN n (x y : Œ±) (H : exclusive x) (H' : x ‚â≤[n] y) : ¬¨ ‚úì[n] y := by
  -- Do the proper instances
  rcases H' with ‚ü® w, _ ‚ü©
  -- exclusive_left
  sorry

lemma exclusive_included (x y : Œ±) (H : exclusive x) (H' : x ‚â≤ y) : ¬¨ ‚úìy := by
  -- Do the proper instances
  sorry

end CMRA

end CMRAUnbundled



section CmraMapBundled

/-! ### Bundled camera maps  -/

/-- A morphism between to CMRAs -/
@[ext]
structure CmraMor (M N : Type*) [CMRA M] [CMRA N] extends NonExpansive M N where
  is_validN_map (n : ‚Ñï) (x : M) : ‚úì[n] x -> ‚úì[n] (toFun x)
  is_op_map (x y : M) : toFun (x ‚¨ù y) = toFun x ‚¨ù toFun y

infixr:25 " -C> " => CmraMor

-- FIXME: Refactor after I stop laughing
infixr:25 " -üì∏> " => CmraMor

/-- The type F behaves like a CMRA morphism -/
class CmraMapClass (F : Type*) (M N : outParam Type*) [CMRA M] [CMRA N] extends
    NonExpansiveClass F M N where
  is_validN_map (n : ‚Ñï) (x : M) : ‚àÄ f : F, ‚úì[n] x -> ‚úì[n] (f x)
  is_op_map (x y : M) : ‚àÄ f : F, f (x ‚¨ù y) = f x ‚¨ù f y

@[coe]
def CmraMapClass.toCmra {F : Type*} {M N : outParam Type*} [CMRA M] [CMRA N] [CmraMapClass F M N] (f : F) :
    M -C> N where
  toFun := f
  is_nonexpansive := by apply NonExpansiveClass.is_nonexpansive
  is_validN_map _ _ := by apply is_validN_map
  is_op_map _ _ := by apply is_op_map

instance {F : Type*} {M N : outParam Type*} [CMRA M] [CMRA N] [CmraMapClass F M N] : CoeTC F (M -C> N) where
  coe := CmraMapClass.toCmra

instance (M N : Type*) [CMRA M] [CMRA N] : FunLike (M -C> N) M N where
  coe := fun F x => F.toFun x
  -- TODO: Simplify
  coe_injective' := by
    intro x y H
    cases x
    cases y
    simp_all
    ext
    simp_all

instance (M N : Type*) [CMRA M] [CMRA N] : CmraMapClass (M -C> N) M N where
  is_nonexpansive := by
    simp [DFunLike.coe]
    intro f
    apply NonExpansive.is_nonexpansive
  is_validN_map := by
    simp [DFunLike.coe]
    intro _ _ f _
    apply f.is_validN_map
    trivial
  is_op_map := by
    simp [DFunLike.coe]
    intro _ _ f
    apply f.is_op_map


/-- The term f hebcaes like a cmra map -/
class HasCmraMap [CMRA M] [CMRA N] [FunLike F M N] (f : F) extends HasNonExpansive f where
  is_validN_map (n : ‚Ñï) (x : M) : ‚úì[n] x -> ‚úì[n] (f x)
  is_op_map (x y : M) : f (x ‚¨ù y) = f x ‚¨ù f y

/-- Any term is a type of cmra map has a proof of cmra map -/
instance [CMRA M] [CMRA N] [CmraMapClass F M N] (f : F) : HasCmraMap f where
  is_validN_map _ _ := by apply CmraMapClass.is_validN_map
  is_op_map _ _ := by apply CmraMapClass.is_op_map


namespace CmraMap

/-- Obtain a Contractive struct for any term which has a proof of contractivity -/
def lift [CMRA M] [CMRA N] [FunLike F M N] (f : F) [HasCmraMap f] : M -C> N where
  toFun := f
  is_nonexpansive := by apply HasNonExpansive.is_nonexpansive
  is_validN_map _ _ := by apply HasCmraMap.is_validN_map
  is_op_map _ _ := by apply HasCmraMap.is_op_map


/-

-- /-- The (bundled) composition of morphisms in the category of OFE+NonExpansive functions -/
-- def Contractive.comp [OFE Œ±] [OFE Œ≤] [OFE Œ≥] (g : Œ≤ -c> Œ≥) (f : Œ± -c> Œ≤) : Œ± -c> Œ≥ where
--   toFun := g ‚àò f
--   is_nonexpansive := by
--     simp only [DFunLike.coe]
--     apply cmp_nonexpansive
--     ¬∑ apply NonExpansive.is_nonexpansive
--     ¬∑ apply NonExpansive.is_nonexpansive
--   is_contractive := by
--     sorry

-- lemma Contractive.comp_assoc [OFE Œ±] [OFE Œ≤] [OFE Œ≥] [OFE Œ¥] {h : Œ≥ -c> Œ¥} {g : Œ≤ -c> Œ≥} {f : Œ± -c> Œ≤} :
--     (h.comp g).comp f = h.comp (g.comp f) := by rfl
-/

@[simp]
lemma coe_ccompose [CMRA Œ±] [CMRA Œ≤] [CMRA Œ≥] (g : Œ≤ -C> Œ≥) (f : Œ± -C> Œ≤) :
    (g.ccompose f : Œ± -> Œ≥) = g ‚àò f := by
  rfl

@[simp]
lemma ccompose_apply [CMRA Œ±] [CMRA Œ≤] [CMRA Œ≥] (g : Œ≤ -C> Œ≥) (f : Œ± -C> Œ≤) (x : Œ±) :
    (g.ccompose f) x = g (f x) := by
  rfl

end CmraMap
end CmraMapBundled
